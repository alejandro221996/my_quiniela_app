#!/usr/bin/env python3
"""
Script de verificaci√≥n simple para My Quiniela App
Verifica que el sistema est√© configurado correctamente despu√©s del bug fix
"""

import os
import sys
from pathlib import Path

def print_header(text):
    """Imprime un header formateado"""
    print(f"\n{'='*50}")
    print(f"  {text}")
    print(f"{'='*50}")

def print_success(text):
    """Imprime un mensaje de √©xito"""
    print(f"‚úÖ {text}")

def print_error(text):
    """Imprime un mensaje de error"""
    print(f"‚ùå {text}")

def print_warning(text):
    """Imprime un mensaje de advertencia"""
    print(f"‚ö†Ô∏è  {text}")

def print_info(text):
    """Imprime informaci√≥n"""
    print(f"‚ÑπÔ∏è  {text}")

def check_django_installation():
    """Verificar si Django est√° instalado"""
    try:
        import django
        print_success(f"Django instalado: {django.get_version()}")
        return True
    except ImportError:
        print_error("Django no est√° instalado")
        print_info("Ejecuta: pip install -r requirements.txt")
        return False

def check_project_files():
    """Verificar archivos importantes del proyecto"""
    important_files = [
        'manage.py',
        'requirements.txt',
        'accounts/forms.py',
        'accounts/models.py',
        'accounts/views.py',
        'github_automation.py',
        'mcp.json',
        '.gitignore'
    ]

    missing_files = []
    for file_path in important_files:
        if not Path(file_path).exists():
            missing_files.append(file_path)

    if missing_files:
        print_error(f"Archivos faltantes: {', '.join(missing_files)}")
        return False
    else:
        print_success("Todos los archivos importantes est√°n presentes")
        return True

def check_env_configuration():
    """Verificar configuraci√≥n de entorno"""
    env_file = Path('.env')

    if not env_file.exists():
        print_warning("Archivo .env no encontrado")
        print_info("Crea un archivo .env con:")
        print_info("  GITHUB_TOKEN=tu_token_aqui")
        print_info("  GITHUB_OWNER=alejandro221996")
        print_info("  GITHUB_REPO=my_quiniela_app")
        return False
    else:
        print_success("Archivo .env encontrado")

        # Verificar variables b√°sicas
        try:
            with open('.env', 'r') as f:
                content = f.read()

            required_vars = ['GITHUB_TOKEN', 'GITHUB_OWNER', 'GITHUB_REPO']
            missing_vars = []

            for var in required_vars:
                if f"{var}=" not in content:
                    missing_vars.append(var)

            if missing_vars:
                print_warning(f"Variables faltantes en .env: {', '.join(missing_vars)}")
                return False
            else:
                print_success("Variables b√°sicas configuradas en .env")
                return True

        except Exception as e:
            print_error(f"Error leyendo .env: {e}")
            return False

def check_django_project():
    """Verificar configuraci√≥n b√°sica de Django"""
    if not check_django_installation():
        return False

    try:
        import django
        from django.conf import settings
        from django.core.management import execute_from_command_line

        # Intentar importar configuraciones
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'quinielas_project.settings')
        django.setup()

        print_success("Configuraci√≥n de Django v√°lida")
        return True

    except Exception as e:
        print_error(f"Error en configuraci√≥n Django: {e}")
        return False

def check_bug_fix_implementation():
    """Verificar que el bug fix est√© implementado"""
    print_info("Verificando implementaci√≥n del bug fix...")

    # Verificar forms.py
    forms_file = Path('accounts/forms.py')
    if forms_file.exists():
        try:
            with open(forms_file, 'r') as f:
                content = f.read()

            if 'ExtendedUserCreationForm' in content:
                print_success("Formulario extendido implementado")
            else:
                print_error("Formulario extendido no encontrado")
                return False
        except Exception as e:
            print_error(f"Error leyendo forms.py: {e}")
            return False
    else:
        print_error("Archivo accounts/forms.py no encontrado")
        return False

    # Verificar models.py actualizado
    models_file = Path('accounts/models.py')
    if models_file.exists():
        try:
            with open(models_file, 'r') as f:
                content = f.read()

            if 'logging' in content and 'logger' in content:
                print_success("Logging implementado en models.py")
            else:
                print_warning("Logging no encontrado en models.py")
        except Exception as e:
            print_error(f"Error leyendo models.py: {e}")
            return False

    # Verificar views.py actualizado
    views_file = Path('accounts/views.py')
    if views_file.exists():
        try:
            with open(views_file, 'r') as f:
                content = f.read()

            if 'ExtendedUserCreationForm' in content and 'transaction.atomic' in content:
                print_success("Vista de registro mejorada implementada")
            else:
                print_warning("Mejoras de vista no completamente implementadas")
        except Exception as e:
            print_error(f"Error leyendo views.py: {e}")
            return False

    return True

def check_github_automation():
    """Verificar herramientas de GitHub automation"""
    if Path('github_automation.py').exists():
        print_success("GitHub automation script disponible")

        # Verificar que no tenga tokens hardcoded
        try:
            with open('github_automation.py', 'r') as f:
                content = f.read()

            if 'github_pat_' in content:
                print_error("‚ö†Ô∏è  PELIGRO: Token hardcoded detectado en github_automation.py")
                return False
            else:
                print_success("GitHub automation script seguro (sin tokens hardcoded)")
        except Exception as e:
            print_warning(f"No se pudo verificar contenido: {e}")

        return True
    else:
        print_error("GitHub automation script no encontrado")
        return False

def check_mcp_configuration():
    """Verificar configuraci√≥n MCP"""
    if Path('mcp.json').exists():
        try:
            import json
            with open('mcp.json', 'r') as f:
                config = json.load(f)

            if 'mcpServers' in config and 'github' in config['mcpServers']:
                print_success("Configuraci√≥n MCP v√°lida")

                # Verificar que use variable de entorno
                github_config = config['mcpServers']['github']
                if 'env' in github_config:
                    token_value = github_config['env'].get('GITHUB_PERSONAL_ACCESS_TOKEN', '')
                    if token_value.startswith('${') or token_value == 'your_github_token_here':
                        print_success("MCP usa variables de entorno (seguro)")
                    elif token_value.startswith('github_pat_'):
                        print_error("‚ö†Ô∏è  PELIGRO: Token hardcoded en mcp.json")
                        return False
                    else:
                        print_success("Configuraci√≥n MCP segura")

                return True
            else:
                print_error("Configuraci√≥n MCP incompleta")
                return False

        except Exception as e:
            print_error(f"Error validando mcp.json: {e}")
            return False
    else:
        print_error("Archivo mcp.json no encontrado")
        return False

def main():
    """Funci√≥n principal"""
    print_header("üîç Verificaci√≥n de My Quiniela App")
    print_info("Verificando configuraci√≥n despu√©s del bug fix...")

    checks = [
        ("üìÅ Archivos del proyecto", check_project_files),
        ("üîß Configuraci√≥n de entorno", check_env_configuration),
        ("üêç Django", check_django_project),
        ("‚úÖ Bug fix implementado", check_bug_fix_implementation),
        ("ü§ñ GitHub automation", check_github_automation),
        ("üîó Configuraci√≥n MCP", check_mcp_configuration)
    ]

    results = []
    for name, check_func in checks:
        print(f"\nüìã Verificando: {name}")
        try:
            result = check_func()
            results.append((name, result))
        except Exception as e:
            print_error(f"Error en verificaci√≥n: {e}")
            results.append((name, False))

    # Resumen final
    print_header("üìä Resumen de Verificaci√≥n")

    passed = sum(1 for _, result in results if result)
    total = len(results)

    for name, result in results:
        status = "‚úÖ" if result else "‚ùå"
        print(f"{status} {name}")

    print(f"\nüìà Resultado: {passed}/{total} verificaciones exitosas")

    if passed == total:
        print_success("üéâ ¬°Todo est√° configurado correctamente!")
        print_info("Tu aplicaci√≥n est√° lista para usar")
        print_info("\nüöÄ Pr√≥ximos pasos:")
        print_info("  1. python manage.py runserver")
        print_info("  2. Visita: http://localhost:8000/accounts/registro/")
        print_info("  3. Prueba el nuevo sistema de registro")
    elif passed >= total * 0.8:
        print_warning("‚ö†Ô∏è  Configuraci√≥n mayormente completa")
        print_info("Algunas funcionalidades pueden estar limitadas")
    else:
        print_error("‚ùå Se requiere atenci√≥n en m√∫ltiples √°reas")
        print_info("Revisa los errores anteriores")

    return 0 if passed == total else 1

if __name__ == "__main__":
    sys.exit(main())
